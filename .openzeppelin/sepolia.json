{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x0a0962177C1673E59072fEf6673f5fe23e2097b9",
    "txHash": "0x2c888d2fb8a10716b6b3584355ab4663558ee73750ac7755b0ba585103aef4dc"
  },
  "proxies": [
    {
      "address": "0x164133258417ADc1b80595Ff0E673B544572432A",
      "txHash": "0xbf85770e17cde1b0d5e19f9fe07228af88a059bdd2b02cc807132b2bc796f410",
      "kind": "transparent"
    },
    {
      "address": "0x7563Af62A6230DAcf62b74C9a5A6aC70D54A90ad",
      "txHash": "0x4f1957856cf19e96dc3bb6dfeb97f5a4124500ccd45b0e599215ff39ed7485ce",
      "kind": "uups"
    }
  ],
  "impls": {
    "bd4e60a08be7d8fd9a807423f220fe2c06ad11d0a7820b04661d4628c34cff47": {
      "address": "0xe9a87e71d6FDEC64AE5e7C513d19Eb7065B826d5",
      "txHash": "0xbc4cd95b444c343f3e75771cb49e0526f15777b4decc5bc4677ae178f11d2c68",
      "layout": {
        "solcVersion": "0.8.28",
        "storage": [
          {
            "label": "greeting",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage",
            "contract": "MyUpgradeableContract",
            "src": "contracts/MyUpgradeableContract.sol:7"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
            }
          ]
        }
      }
    },
    "d2976581933241cf82f7971f088a9d82bdd85f0d580a43483e4eb41cd1d9a44a": {
      "address": "0x08859413BCa54b45A7613672b4961255Ca6EB327",
      "txHash": "0x7e0f205b80fc919a1304302ae22f894876edbef774864620134f9d9b346a3d51",
      "layout": {
        "solcVersion": "0.8.28",
        "storage": [
          {
            "label": "startBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256",
            "contract": "MetaNodeStake",
            "src": "contracts/MetaNodeStake.sol:81"
          },
          {
            "label": "endBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "MetaNodeStake",
            "src": "contracts/MetaNodeStake.sol:83"
          },
          {
            "label": "MetaNodePerBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256",
            "contract": "MetaNodeStake",
            "src": "contracts/MetaNodeStake.sol:86"
          },
          {
            "label": "withdrawPaused",
            "offset": 0,
            "slot": "3",
            "type": "t_bool",
            "contract": "MetaNodeStake",
            "src": "contracts/MetaNodeStake.sol:89"
          },
          {
            "label": "claimPaused",
            "offset": 1,
            "slot": "3",
            "type": "t_bool",
            "contract": "MetaNodeStake",
            "src": "contracts/MetaNodeStake.sol:92"
          },
          {
            "label": "MetaNode",
            "offset": 2,
            "slot": "3",
            "type": "t_contract(IERC20)2298",
            "contract": "MetaNodeStake",
            "src": "contracts/MetaNodeStake.sol:94"
          },
          {
            "label": "totalPoolWeight",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256",
            "contract": "MetaNodeStake",
            "src": "contracts/MetaNodeStake.sol:98"
          },
          {
            "label": "pool",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_struct(Pool)6752_storage)dyn_storage",
            "contract": "MetaNodeStake",
            "src": "contracts/MetaNodeStake.sol:98"
          },
          {
            "label": "user",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(User)6768_storage))",
            "contract": "MetaNodeStake",
            "src": "contracts/MetaNodeStake.sol:100"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(Pool)6752_storage)dyn_storage": {
            "label": "struct MetaNodeStake.Pool[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(UnstakeRequest)6757_storage)dyn_storage": {
            "label": "struct MetaNodeStake.UnstakeRequest[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)2298": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_struct(User)6768_storage)": {
            "label": "mapping(address => struct MetaNodeStake.User)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(User)6768_storage))": {
            "label": "mapping(uint256 => mapping(address => struct MetaNodeStake.User))",
            "numberOfBytes": "32"
          },
          "t_struct(Pool)6752_storage": {
            "label": "struct MetaNodeStake.Pool",
            "members": [
              {
                "label": "stTokenAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "poolWeight",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "accMetaNodePerST",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "stTokenAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "minDepositAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "unstakeLockedBlocks",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(UnstakeRequest)6757_storage": {
            "label": "struct MetaNodeStake.UnstakeRequest",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "unlockBlocks",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(User)6768_storage": {
            "label": "struct MetaNodeStake.User",
            "members": [
              {
                "label": "stAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "finishedMetaNode",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "pendingMetaNode",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "requests",
                "type": "t_array(t_struct(UnstakeRequest)6757_storage)dyn_storage",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)27_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)27_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_uint64": {
            "label": "uint64"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)27_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
            }
          ]
        }
      }
    }
  }
}
